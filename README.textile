h1. Setting up Tufts Election development environment:

# Copy the *.sample files in config/ to the appropriate .yml filenames.
# Initialize hydra-jetty for development environments
  <pre>rake jetty:clean</pre>
# Start Jetty:
  <pre>rake jetty:start</pre>
# Import candidates - parameter is the directory containing all the candidate authority files.
  <pre>./script/import_candidates spec/fixtures/candidates/</pre>
# Import election result records from spec/fixtures/election_records
  <pre>rake index</pre>
# Migrate your database:
  <pre>rake db:migrate</pre>
# Start rails:
  <pre>rails s</pre>

h3. Running the specs
# Make sure jetty is running
# <pre> RAILS_ENV=test rake index </pre>
# <pre> bundle exec rake spec </pre>

h3. Importing authorities

There is an initializer script that will load the candidate names authorities every time the server is restarted.  The initializer downloads the names authority into a temp file, and then reads the temp file to index the data in solr.  This takes a long time to run, so it is disabled in development mode.  If the script detects that the data has already been downloaded, it will skip the indexing.

If you want to force it to re-load the candidate names, you can remove the temp file that the data is downloaded to:
<pre> rm tmp/candidates.xml </pre>

h1. Setting up Tufts Election search:
# solrize objects
  <pre>INDEX_LIST=pids.csv RAILS_ENV=production rake solrizer:fedora:solrize_objects</pre>
